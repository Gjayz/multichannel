apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

def getSdkPath(){
    Properties properties = new Properties()
    InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream() ;
    properties.load( inputStream )

    return  properties.getProperty('sdk.dir')
}

android {
    signingConfigs {
        release {
            keyAlias 'openproject'
            keyPassword '123456'
            storeFile file('./opendemo.jks')
            storePassword '123456'
        }
    }
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.gjayz.opendemo"
        minSdkVersion 19
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.release
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}

afterEvaluate {
    android.applicationVariants.all { variant ->
        variant.assemble.doLast {
            if (variant.buildType.name.contains('release')) {
                exec {
                    ignoreExitValue true
                    //mac 电脑执行shell脚本进行自动化多渠道打包
//                    commandLine "sh", "${project.getRootDir()}/jiagu_mac/jiagu_360.sh", "${project.getProject().name}",
//                            "${android.defaultConfig.applicationId}", "${android.defaultConfig.versionName}",
//                            "${getSdkPath()}/build-tools/${android.buildToolsVersion}", "${android.signingConfigs.release.storeFile}",
//                            "${android.signingConfigs.release.storePassword}", "${android.signingConfigs.release.keyAlias}",
//                            "${android.signingConfigs.release.keyPassword}"

                    //Windows电脑如果安装执行shell脚本的环境也可以执行shell脚本
                    commandLine "cmd", "/c", "${project.getRootDir()}/jiagu/jiagu_360.sh", "${project.getProject().name}",
                            "${android.defaultConfig.applicationId}", "${android.defaultConfig.versionName}",
                            "${getSdkPath()}\\build-tools\\${android.buildToolsVersion}", "${android.signingConfigs.release.storeFile}",
                            "${android.signingConfigs.release.storePassword}", "${android.signingConfigs.release.keyAlias}",
                            "${android.signingConfigs.release.keyPassword}"

                    //windows电脑执行bat批处理进行自动化多渠道打包
//                    commandLine "cmd", "/c", "${project.getRootDir()}/jiagu/jiagu_360.bat", "${project.getProject().name}",
//                            "${android.defaultConfig.applicationId}", "${android.defaultConfig.versionName}",
//                            "${getSdkPath()}\\build-tools\\${android.buildToolsVersion}", "${android.signingConfigs.release.storeFile}",
//                            "${android.signingConfigs.release.storePassword}", "${android.signingConfigs.release.keyAlias}",
//                            "${android.signingConfigs.release.keyPassword}"
                }
            }
        }
    }
}